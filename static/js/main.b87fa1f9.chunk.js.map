{"version":3,"sources":["components/buttons/BasicButton.js","assets/img/logo_black.svg","components/DateTimePicker.js","views/StyleGuide.js","views/Login.js","assets/img/logo_white.svg","App.js","components/AutoComplete.js","views/Record.js","reportWebVitals.js","theme.js","index.js"],"names":["useStyles","makeStyles","theme","margin","spacing","transferIcon","type","ButtonComponent","props","classes","text","variant","color","disabled","size","startIcon","defaultMargin","fullWidth","Button","className","undefined","onClick","clickButton","defaultProps","input","width","Date","Login","useState","isForgot","setForgot","isSignUp","setSignUp","changeSignIn","changeSignUp","board","root","noValidate","autoComplete","TextField","id","label","Typography","align","display","gutterBottom","href","BasicButton","Î","console","log","history","push","Container","maxWidth","Grid","container","justify","item","lg","sm","xs","src","logo","alt","App","createFilterOptions","exact","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createMuiTheme","typography","fontFamily","join","h4","marginTop","marginBottom","palette","primary","light","main","dark","secondary","success","error","danger","contrastThreshold","tonalOffset","ThemeStyle","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b87fa1f9.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport KeyboardBackspaceIcon from '@material-ui/icons/KeyboardBackspace';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nconst transferIcon = type => {\n  switch (type) {\n    case 'SaveIcon':\n      return <SaveIcon />\n    case 'DeleteIcon':\n      return <DeleteIcon />\n    case 'AddIcon':\n      return <AddIcon />\n    case 'EditIcon':\n      return <EditIcon />\n    case 'ClearIcon':\n      return <ClearIcon />\n    case 'KeyboardBackspaceIcon':\n      return <KeyboardBackspaceIcon />\n    default:\n      return\n  }\n}\n\nconst ButtonComponent = props => {\n  const classes = useStyles();\n  const { text, variant, color, disabled, size, startIcon, defaultMargin, fullWidth } = props;\n\n  return (\n    <Button variant={variant}\n      color={color}\n      disabled={disabled}\n      size={size}\n      className={defaultMargin !== undefined ? '' : classes.margin}\n      startIcon={transferIcon(startIcon)}\n      onClick={props.clickButton}\n      fullWidth={fullWidth !== undefined ? fullWidth : false}\n    >{text}</Button>\n  )\n}\nButtonComponent.defaultProps = {}\n\nexport default ButtonComponent;","export default __webpack_public_path__ + \"static/media/logo_black.9751a1eb.svg\";","import React from 'react';\n\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport {\n  DatePicker,\n  TimePicker,\n  DateTimePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    width: '-webkit-fill-available'\n  },\n}));\n\nconst DatetimepickerComponent = props => {\n  const classes = useStyles();\n  const { type, label, variant, selectValue ,helperText} = props\n  // const [selectedDate, setDate] = useState(defaultValue);\n  // const handleDateChange = (newDate) => {\n  //   console.log(newDate);\n  //   setDate(newDate);\n  // }\n  const picker = pickerType => {\n    switch (pickerType) {\n      case 'Date':\n        return <DatePicker label={label} inputVariant={variant} value={selectValue} onChange={props.handleDateChange} className={classes.input} />\n      case 'Time':\n        return <TimePicker label={label} inputVariant={variant} value={selectValue} onChange={props.handleDateChange} helperText={helperText} className = { classes.input } />\n      case 'DateTime':\n      default:\nreturn <DateTimePicker label={label} inputVariant={variant} value={selectValue} onChange={props.handleDateChange} className={classes.input} />\n    }\n  }\nreturn (\n  <MuiPickersUtilsProvider utils={DateFnsUtils}>\n    {picker(type)}\n  </MuiPickersUtilsProvider>\n);\n}\nexport default DatetimepickerComponent","import React, { useState } from 'react';\n\nimport { format } from 'date-fns';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Box from '@material-ui/core/Box';\n\nimport Card from '@components/Card';\nimport BasicButton from '@components/buttons/BasicButton';\nimport IconButton from '@components/buttons/IconButton';\nimport GroupButton from '@components/buttons/GroupButton';\nimport Radio from '@components/Radio';\nimport Checkbox from '@components/Checkbox';\nimport DateTimePicker from '@components/DateTimePicker';\nimport Calendar from '@components/Calendar';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Divider from '@material-ui/core/Divider';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    width: '-webkit-fill-available'\n  },\n}));\n\nconst time = new Date(2014, 6, 2, 15)\nconst currencies = [\n  {\n    value: 'USD',\n    label: '$',\n  },\n  {\n    value: 'EUR',\n    label: '€',\n  },\n  {\n    value: 'BTC',\n    label: '฿',\n  },\n  {\n    value: 'JPY',\n    label: '¥',\n  },\n];\nconst genderList = [\n  {\n    value: 'male',\n    label: 'Male',\n    disabled: false\n  },\n  {\n    value: 'female',\n    label: 'Female',\n    disabled: false\n  },\n  {\n    value: 'other',\n    label: 'Other',\n    disabled: true\n  }\n]\nconst sportList = [\n  {\n    label: 'Baseball',\n    id: 'baseball',\n    checked: true\n  },\n  {\n    label: 'Football',\n    id: 'football',\n    checked: false\n  },\n  {\n    label: 'Running',\n    id: 'running',\n    checked: true\n  },\n]\nconst workoutList = [\n  {\n    date: \"20201001\",\n    records: [\n      {\n        id: 1,\n        name: \"weight\"\n      }\n    ]\n\n  },\n  {\n    date: \"20201010\",\n    records: [\n      {\n        id: 2,\n        name: \"weight\"\n      },\n      {\n        id: 3,\n        name: \"yoga\"\n      }\n    ]\n  }\n]\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst StyleGuide = () => {\n  const classes = useStyles();\n  const [currency, setCurrency] = useState('EUR');\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const handleChange = (event) => {\n    setCurrency(event.target.value);\n  };\n  const clickDate = (date) => {\n    setCurrentDate(date);\n  }\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  }\n  return (\n    <div>\n      <Container maxWidth=\"lg\">\n        <Grid container spacing={2}>\n          <Grid item lg={12}>\n            <Card header={<Typography variant=\"h3\">\n              Typography\n                </Typography>}>\n              <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                h1. Heading\n                </Typography>\n              <Typography variant=\"h2\" gutterBottom>\n                h2. Heading\n                </Typography>\n              <Typography variant=\"h3\" gutterBottom>\n                h3. Heading\n                </Typography>\n              <Typography variant=\"h4\" gutterBottom>\n                h4. Heading\n                </Typography>\n              <Typography variant=\"h5\" gutterBottom>\n                h5. Heading\n                </Typography>\n              <Typography variant=\"h6\" gutterBottom>\n                h6. Heading\n                </Typography>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                subtitle1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur\n                </Typography>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                subtitle2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur\n                </Typography>\n              <Typography variant=\"body1\" gutterBottom>\n                body1. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur\n                unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam\n                dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.\n                </Typography>\n              <Typography variant=\"body2\" gutterBottom>\n                body2. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos blanditiis tenetur\n                unde suscipit, quam beatae rerum inventore consectetur, neque doloribus, cupiditate numquam\n                dignissimos laborum fugiat deleniti? Eum quasi quidem quibusdam.\n                </Typography>\n              <Typography variant=\"button\" display=\"block\" gutterBottom>\n                button text\n                </Typography>\n              <Typography variant=\"caption\" display=\"block\" gutterBottom>\n                caption text\n                </Typography>\n              <Typography variant=\"overline\" display=\"block\" gutterBottom>\n                overline text\n                </Typography>\n              <Box color=\"primary.main\">primary.main</Box>\n              <Box color=\"secondary.main\">secondary.main</Box>\n              <Box color=\"error.main\">error.main</Box>\n              <Box color=\"warning.main\">warning.main</Box>\n              <Box color=\"info.main\">info.main</Box>\n              <Box color=\"success.main\">success.main</Box>\n              <Box color=\"text.primary\">text.primary</Box>\n              <Box color=\"text.secondary\">text.secondary</Box>\n              <Box color=\"text.disabled\">text.disabled</Box>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item lg={12} sm={12}>\n            <Card\n              header={<Typography variant=\"h3\">\n                Buttons\n                </Typography>}>\n              <Typography variant=\"h4\" gutterBottom>\n                Contained\n                </Typography>\n              <BasicButton text=\"Primary\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Secondary\"\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Default\"\n                variant=\"contained\"\n                color=\"default\"\n                disabled={false}\n                size=\"large\" />\n              <Typography variant=\"h4\" gutterBottom>\n                Outlined\n                </Typography>\n              <BasicButton text=\"Primary\"\n                variant=\"outlined\"\n                color=\"primary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Secondary\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Default\"\n                variant=\"outlined\"\n                color=\"default\"\n                disabled={false}\n                size=\"large\" />\n              <Typography variant=\"h4\" gutterBottom>\n                Text\n                </Typography>\n              <BasicButton text=\"Primary\"\n                color=\"primary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Secondary\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Default\"\n                color=\"default\"\n                disabled={false}\n                size=\"large\" />\n              <Typography variant=\"h4\" gutterBottom>\n                Size\n                </Typography>\n              <BasicButton text=\"Large\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Large\"\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"large\" />\n              <BasicButton text=\"Small\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={false}\n                size=\"small\" />\n              <BasicButton text=\"Small\"\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"small\" />\n              <Typography variant=\"h4\" gutterBottom>\n                Disabled\n                </Typography>\n              <BasicButton text=\"Disabled\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={true}\n                size=\"large\" />\n              <BasicButton text=\"Disabled\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                disabled={true}\n                size=\"large\" />\n              <BasicButton text=\"Disabled\"\n                variant=\"text\"\n                color=\"secondary\"\n                disabled={true}\n                size=\"large\" />\n              <Typography variant=\"h4\" gutterBottom>\n                With Icon\n                </Typography>\n              <BasicButton text=\"Save\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={false}\n                size=\"large\"\n                startIcon=\"SaveIcon\" />\n              <BasicButton text=\"Delete\"\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"large\"\n                startIcon=\"DeleteIcon\" />\n              <BasicButton text=\"Add\"\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={false}\n                size=\"large\"\n                startIcon=\"AddIcon\" />\n              <BasicButton text=\"Edit\"\n                variant=\"contained\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"large\"\n                startIcon=\"EditIcon\" />\n              <Typography variant=\"h4\" gutterBottom>\n                Icon Buttons\n                </Typography>\n              <IconButton color=\"primary\" icon=\"EditIcon\" ariaLabel=\"edit\" />\n              <IconButton color=\"secondary\" icon=\"AddIcon\" ariaLabel=\"add\" />\n              <IconButton color=\"primary\" icon=\"SaveIcon\" ariaLabel=\"save\" />\n              <IconButton color=\"secondary\" icon=\"DeleteIcon\" ariaLabel=\"delete\" />\n              <Typography variant=\"h4\" gutterBottom>\n                Group Button\n                </Typography>\n              <GroupButton color=\"primary\" textList={['week', 'month', 'year']}>\n              </GroupButton>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item lg={12}>\n            <Card header={<Typography variant=\"h3\">Forms</Typography>}>\n              <Typography variant=\"h4\" gutterBottom>\n                Normal Text Field\n                </Typography>\n              <Grid container spacing={2}>\n                <Grid item lg={2}><TextField id=\"standard-basic\" label=\"Standard\" className={classes.input} /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    error\n                    id=\"standard-error-helper-text\"\n                    label=\"Error\"\n                    defaultValue=\"Hello World\"\n                    helperText=\"Incorrect entry.\"\n                  />\n                </Grid>\n                <Grid item lg={2}><TextField required id=\"standard-required\" label=\"Required\" defaultValue=\"Hello World\" /></Grid>\n                <Grid item lg={2}><TextField disabled id=\"standard-disabled\" label=\"Disabled\" defaultValue=\"Hello World\" /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    id=\"standard-password-input\"\n                    label=\"Password\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                  /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    id=\"standard-number\"\n                    label=\"Number\"\n                    type=\"number\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  /></Grid>\n                <Grid item lg={2}><TextField id=\"outlined-basic\" label=\"Outlined\" variant=\"outlined\" className={classes.input} /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    error\n                    id=\"outlined-error-helper-text\"\n                    label=\"Error\"\n                    defaultValue=\"Hello World\"\n                    helperText=\"Incorrect entry.\"\n                    variant=\"outlined\"\n                  /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    required\n                    id=\"outlined-required\"\n                    label=\"Required\"\n                    defaultValue=\"Hello World\"\n                    variant=\"outlined\"\n                  /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    disabled\n                    id=\"outlined-disabled\"\n                    label=\"Disabled\"\n                    defaultValue=\"Hello World\"\n                    variant=\"outlined\"\n                  /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    id=\"outlined-password-input\"\n                    label=\"Password\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    variant=\"outlined\"\n                  /></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    id=\"outlined-number\"\n                    label=\"Number\"\n                    type=\"number\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                  /></Grid>\n              </Grid>\n              <Typography variant=\"h4\" gutterBottom>\n                Multi Text Field\n                </Typography>\n              <Grid container spacing={2}>\n                <Grid item lg={2}><TextField id=\"standard-basic\" multiline label=\"Standard\" /></Grid>\n                <Grid item lg={2}><TextField id=\"outlined-basic\" multiline label=\"Outlined\" variant=\"outlined\" /></Grid>\n              </Grid>\n              <Typography variant=\"h4\" gutterBottom>\n                Select Text Field\n                </Typography>\n              <Grid container spacing={2}>\n                <Grid item lg={2}>\n                  <TextField\n                    id=\"standard-select-currency\"\n                    select\n                    label=\"Select\"\n                    value={currency}\n                    onChange={handleChange}\n                    helperText=\"Please select your currency\"\n                  >\n                    {currencies.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField></Grid>\n                <Grid item lg={2}>\n                  <TextField\n                    id=\"outlined-select-currency\"\n                    select\n                    label=\"Select\"\n                    value={currency}\n                    onChange={handleChange}\n                    helperText=\"Please select your currency\"\n                    variant=\"outlined\"\n                  >\n                    {currencies.map((option) => (\n                      <MenuItem key={option.value} value={option.value}>\n                        {option.label}\n                      </MenuItem>\n                    ))}\n                  </TextField></Grid>\n              </Grid>\n              <Typography variant=\"h4\" gutterBottom>\n                Radio Group\n                </Typography>\n              <Radio label=\"gender\" radioList={genderList} horizontal={true} helperText=\"helperText\" hasError={false} />\n              <Typography variant=\"h4\" gutterBottom>\n                Checkbox\n                </Typography>\n              <Checkbox label=\"Sport\" checkboxList={sportList} hasError={false} />\n              <Typography variant=\"h4\" gutterBottom>\n                Date\n                </Typography>\n              <Grid container spacing={2}>\n                <Grid item lg={2}><DateTimePicker label=\"Date\" type=\"Date\" /></Grid>\n                <Grid item lg={2}><DateTimePicker label=\"Time\" type=\"Time\" defaultValue={time} /></Grid>\n                <Grid item lg={2}><DateTimePicker label=\"DateTime\" type=\"DateTime\" /></Grid>\n                <Grid item lg={2}><DateTimePicker label=\"Date\" type=\"Date\" variant=\"outlined\" /></Grid>\n                <Grid item lg={2}><DateTimePicker label=\"Time\" type=\"Time\" variant=\"outlined\" /></Grid>\n                <Grid item lg={2}><DateTimePicker label=\"DateTime\" type=\"DateTime\" variant=\"outlined\" /></Grid>\n              </Grid>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item lg={12} sm={12}>\n            <Card header={<Typography variant=\"h3\">Calendar</Typography>}>\n              <span>{format(new Date(currentDate), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")}</span>\n              <Calendar clickParentDate={clickDate} clickParentDateEvent={handleOpenDialog} workoutList={workoutList}>\n                <BasicButton text=\"New Workout\"\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  disabled={false}\n                  size=\"large\"\n                  startIcon=\"AddIcon\"\n                  clickButton={handleOpenDialog} />\n              </Calendar>\n            </Card>\n          </Grid>\n        </Grid>\n        <Dialog\n          fullWidth={true}\n          TransitionComponent={Transition}\n          maxWidth={'sm'}\n          open={openDialog}\n          onClose={handleCloseDialog}\n          aria-labelledby=\"responsive-dialog-title\"\n        >\n          <DialogTitle id=\"responsive-dialog-title\">\n            <h4> {`+ Add Workout - ${format(currentDate, 'LLL / dd')}`}</h4>\n\n          </DialogTitle>\n          <Divider />\n          <DialogContent>\n            {/* <DialogContentText> */}\n            <div>\n              <div className=\"dialog-content\">Please choose workout type</div>\n              <div className=\"wk-type\">\n                <ButtonBase\n                  focusRipple\n                  className=\"btn-wk-type\"\n                >\n                  <div className=\"wk-type-content\"><FitnessCenterIcon style={{ fontSize: 50 }} /></div>\n                  <span>Weight Training</span>\n                </ButtonBase>\n                <ButtonBase\n                  focusRipple\n                  className=\"btn-wk-type\"\n                >\n                  <div className=\"wk-type-content\"><DirectionsRunIcon style={{ fontSize: 50 }} /></div>\n                  <span>Other Training</span>\n                </ButtonBase>\n              </div>\n            </div>\n            {/* </DialogContentText> */}\n          </DialogContent>\n          <Divider />\n          <DialogActions>\n            <BasicButton text=\"CANCEL\"\n              variant=\"outlined\"\n              color=\"secondary\"\n              disabled={false}\n              size=\"large\"\n              clickButton={handleCloseDialog} />\n            <BasicButton text=\"NEXT\"\n              variant=\"contained\"\n              color=\"secondary\"\n              disabled={false}\n              size=\"large\" />\n          </DialogActions>\n        </Dialog>\n      </Container >\n    </div >\n  );\n\n}\n// StyleGuide.propTypes = {\n//     params: React.PropTypes.object,\n//   };\n\nexport default StyleGuide;\n","import React, { useState, Fragment } from 'react';\nimport '@assets/css/style.css';\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport BasicButton from '@components/buttons/BasicButton';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '@assets/img/logo_black.svg';\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    width: '-webkit-fill-available'\n  }\n}));\n\nconst Login = props => {\n  const classes = useStyles();\n  const [isForgot, setForgot] = useState(false);\n  const [isSignUp, setSignUp] = useState(false);\n\n  const changeForgot = () => {\n    setForgot(true);\n    setSignUp(false);\n  }\n  const changeSignIn = () => {\n    setForgot(false);\n    setSignUp(false);\n  }\n  const changeSignUp = () => {\n    setSignUp(true);\n    setForgot(false);\n  }\n  const handleSignIn = () => {\n    console.log('sign in');\n    props.history.push('/Main');\n  }\n  let board = null;\n  if (isForgot === false && isSignUp === false) {\n    board = (\n      <Fragment>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" className={classes.input} />\n          <TextField id=\"outlined-basic\" type=\"password\" label=\"Password\" variant=\"outlined\" className={classes.input} />\n        </form>\n        <Typography variant=\"subtitle2\"  align=\"right\" display=\"block\" gutterBottom>\n          <a href=\"/#\" className=\"link\" onClick={changeForgot}>Forgot Password?</a>\n        </Typography>\n        <BasicButton text=\"Sign In\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={false}\n          defaultMargin={0}\n          size=\"large\"\n          fullWidth={true} Î\n          clickButton={handleSignIn}\n        />\n        {/* <Link to=\"StyleGuide\">\n          <div>點選跳轉到Page1</div>\n        </Link> */}\n        <Typography variant=\"subtitle1\" align=\"center\" gutterBottom className=\"text\">\n          Don’t have an account ?<br/><a href=\"/#\" className=\"link\" onClick={changeSignUp}> Sign Up </a>Now!</Typography>\n      </Fragment>\n    );\n  }\n  if (isForgot) {\n    board = (\n      <Fragment>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom className=\"text\">\n          <span>- Reset Your Password -</span>\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"left\" gutterBottom className=\"text\">\n          <span>Enter your user account's verified email address and we will send you a password reset link.</span>\n        </Typography>\n\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" className={classes.input} />\n        </form>\n\n        <BasicButton text=\"Send Email\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={false}\n          defaultMargin={0}\n          size=\"large\"\n          fullWidth={true}\n        />\n        <Typography variant=\"subtitle1\" align=\"center\" gutterBottom className=\"text\">\n          <a href=\"/#\" className=\"link\" onClick={changeSignIn}> Sign In </a> / <a href=\"/#\" className=\"link\" onClick={changeSignUp}> Sign Up </a></Typography>\n      </Fragment>\n    )\n  }\n  if (isSignUp) {\n    board = (\n      <Fragment>\n        <form className={classes.root} noValidate autoComplete=\"off\">\n          <TextField id=\"outlined-basic\" label=\"Name\" variant=\"outlined\" className={classes.input} />\n          <TextField id=\"outlined-basic\" label=\"Email\" variant=\"outlined\" className={classes.input} />\n          <TextField id=\"outlined-basic\" type=\"password\" label=\"Password\" variant=\"outlined\" className={classes.input} />\n          <TextField id=\"outlined-basic\" type=\"password\" label=\"Password Again\" variant=\"outlined\" className={classes.input} />\n        </form>\n        <BasicButton text=\"Sign Up\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={false}\n          defaultMargin={0}\n          size=\"large\"\n          fullWidth={true}\n        />\n        <Typography variant=\"subtitle1\" align=\"center\" gutterBottom className=\"text\">\n          Already have an account? <a href=\"/#\" className=\"link\" onClick={changeSignIn}> Sign In </a></Typography>\n      </Fragment >\n    )\n\n  }\n  return (\n    <div>\n      <div className=\"bg-login\">\n        <Container maxWidth=\"lg\">\n          <Grid container justify=\"center\" spacing={3}>\n            <Grid item lg={4} sm={10} xs={10}>\n              <div className=\"board-login\">\n                <img src={logo} alt=\"logo\" className=\"logo logo-login\"></img>\n                {board}\n              </div>\n            </Grid></Grid>\n        </Container>\n        <Container maxWidth=\"lg\" className=\"board-copyright\">\n          <Grid container justify=\"center\">\n            <Grid item lg={4} sm={10} xs={10}>\n              <Typography variant=\"subtitle1\" align=\"center\" gutterBottom className=\"text-copyright\">\n                COPYRIGHT © 2021 Workouter. ALL RIGHTS RESERVED.</Typography>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    </div >\n  );\n};\n\n\nexport default Login;","export default __webpack_public_path__ + \"static/media/logo_white.d1e009ca.svg\";","import React from 'react';\nimport { BrowserRouter as Switch, Router, Route, Redirect } from 'react-router-dom';\nimport StyleGuide from '@views/StyleGuide';\nimport Login from '@views/Login'\nimport Main from '@views/Main'\nimport Record from '@views/Record'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/login\" />\n        </Route>\n        <Route path=\"/login\"><Login /></Route>\n        {/* <Route path='/StyleGuide' component={StyleGuide} />\n        <Route path='/Main' component={Main} />\n        <Route path='/Record' component={Record} /> */}\n      </Switch>\n    </div>\n  );\n\n};\n\n\nexport default App;","import React, { useState } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst filter = createFilterOptions();\n\nconst AutoCompleteComponent = props => {\n  const { id, list, label ,defaultValue} = props;\n  const [value, setValue] = useState(defaultValue);\n  return (\n    <Autocomplete\n      value={value}\n      onChange={(event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue,\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue,\n          });\n        } else {\n          setValue(newValue);\n        }\n        props.changeSelect(newValue);\n      }}\n      filterOptions={(options, params) => {\n        const filtered = filter(options, params);\n\n        // Suggest the creation of a new value\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            title: `Add \"${params.inputValue}\"`,\n          });\n        }\n\n        return filtered;\n      }}\n      selectOnFocus\n      clearOnBlur\n      handleHomeEndKeys\n      fullWidth={true}\n      id={id}\n      options={list}\n      getOptionLabel={(option) => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        }\n        // Add \"xxx\" option created dynamically\n        if (option.inputValue) {\n          return option.inputValue;\n        }\n        // Regular option\n        return option.title;\n      }}\n      renderOption={(option) => option.title}\n      // style={{ width: 300 }}\n      freeSolo\n      renderInput={(params) => (\n        <TextField {...params} label={label} variant=\"outlined\" />\n      )}\n    />\n  )\n}\nexport default AutoCompleteComponent;","import React, { Fragment, useState, useEffect } from 'react';\nimport { BrowserRouter as Link } from 'react-router-dom';\nimport { format, parse, isAfter } from 'date-fns';\n\nimport Card from '@components/Card';\nimport BasicButton from '@components/buttons/BasicButton';\nimport Calendar from '@components/Calendar';\nimport Dialog from '@components/Dialog'\nimport DateTimePicker from '@components/DateTimePicker';\nimport IconButton from '@components/buttons/IconButton';\nimport AutoComplete from '@components/AutoComplete'\n\nimport { Container, Grid, Avatar, Typography, AppBar, Toolbar } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport Popover from '@material-ui/core/Popover';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport FitnessCenterIcon from '@material-ui/icons/FitnessCenter';\nimport DirectionsRunIcon from '@material-ui/icons/DirectionsRun';\nimport RoomIcon from '@material-ui/icons/Room';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport SubjectIcon from '@material-ui/icons/Subject';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '@assets/img/logo_white.svg';\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    width: '-webkit-fill-available'\n  }\n}));\n\nconst workoutList = [\n  {\n    date: \"20201101\",\n    records: [\n      {\n        id: 1,\n        name: \"weight\",\n        startTime: \"18:00\",\n        endTime: \"20:00\",\n        place: \"MYWAY Fitness\",\n        memo: \"Amet minim mollit non deserunt ullamco est sit aliqua dolor do ame\",\n        weightDetails: [\n          {\n            id: 1,\n            part: { title: '上身', id: 1 },\n            movement: { title: '深蹲', id: 1 },\n            euqipment: { title: '啞鈴', id: 1 },\n            times: 10,\n            sets: 3\n          }\n        ]\n      }\n    ]\n\n  },\n  {\n    date: \"20201110\",\n    records: [\n      {\n        id: 2,\n        name: \"weight\"\n      },\n      {\n        id: 3,\n        name: \"yoga\"\n      }\n    ]\n  }\n]\nconst parts = [\n  { title: '全身', id: 1 },\n  { title: '上身', id: 2 },\n  { title: '下身', id: 3 }\n]\nconst movements = [\n  { title: '深蹲', id: 1 },\n  { title: '硬舉', id: 2 },\n  { title: '划船', id: 3 }\n]\nconst equipments = [\n  { title: '啞鈴', id: 1 },\n  { title: '槓鈴', id: 2 },\n  { title: '壺鈴', id: 3 }\n]\n\nconst weightUnits = [\n  {\n    value: 'kg',\n    label: 'KG',\n  },\n  {\n    value: 'pond',\n    label: 'Pond',\n  }\n];\n// const generate = (element) => {\n//   return [0, 1, 2].map((value) =>\n//     React.cloneElement(element, {\n//       key: value,\n//     }),\n//   );\n// }\nconst Record = props => {\n  const classes = useStyles();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [openDialog, setOpenDialog] = useState(false);\n  const [openWeightDialog, setOpenWeightDialog] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  // const [dense, setDense] = useState(false);\n  const [secondary, ] = useState(false);\n  const [trainType, setTrainType] = useState('');\n  const [mode, setMode] = useState('');\n  const [record, setRecord] = useState({ formatStartTime: new Date(), formatEndTime: new Date() });\n  // const [weightDetails, setWeightDetails] = useState([]);\n  const [weightDetailObj, setWeightDetailObj] = useState({ part: null, movement: null, equipment: null, weight: \"\", weightUnit: 'kg', times: \"\", sets: \"\", rest: \"\", weightMemo: \"\" });\n  const [timeHasError, setTimeHasError] = useState(false);\n\n  const clickDate = (date) => {\n    setCurrentDate(date);\n  }\n  const handleOpenDialog = type => {\n    setAnchorEl(null);\n    if (type === 'add') {\n      setMode('add');\n      setRecord({ formatStartTime: new Date(), formatEndTime: new Date() });\n    }\n    if (type === 'edit') {\n      setMode('edit');\n      setTrainType(record.name);\n      let formatStartTime = parse(format(currentDate, 'yyyy/MM/dd ') + record.startTime, 'yyyy/MM/dd HH:mm', new Date());\n      let formatEndTime = parse(format(currentDate, 'yyyy/MM/dd ') + record.endTime, 'yyyy/MM/dd HH:mm', new Date());\n      setRecord({ ...record, formatStartTime: formatStartTime, formatEndTime: formatEndTime })\n    }\n    setWeightDetailObj({ part: null, movement: null, equipment: null, weight: \"\", weightUnit: 'kg', times: \"\", sets: \"\", rest: \"\", weightMemo: \"\" });\n    setOpenDialog(true);\n  };\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setTrainType('');\n    setTimeHasError(false);\n  }\n  const handleOpenWeightDialog = () => {\n    setOpenWeightDialog(true);\n  }\n  const handleCloseWeightDialog = () => {\n    setOpenWeightDialog(false);\n  }\n  const handleBack = () => {\n    setTrainType('');\n    setRecord({ formatStartTime: new Date(), formatEndTime: new Date() });\n    setWeightDetailObj({ part: null, movement: null, equipment: null, weight: \"\", weightUnit: 'kg', times: \"\", sets: \"\", rest: \"\", weightMemo: \"\" });\n  }\n  const handleOpenPopover = (event, record) => {\n    setAnchorEl(event.target);\n    setRecord(record)\n  }\n  const handleClosePopover = () => {\n    setAnchorEl(null);\n  }\n  const handleClickBaseButton = t => {\n    setTrainType(t);\n  }\n  const handleAddDetail = () => {\n\n    setWeightDetailObj({ id: Date.now(), ...weightDetailObj });\n    let details = record.weightDetails === undefined ? [] : record.weightDetails\n    details.push(weightDetailObj);\n    setRecord({ ...record, weightDetails: details })\n  }\n  const handleDeleteDetail = (id) => {\n    let details = record.weightDetails.filter(item => item.id !== id);\n    setRecord({ ...record, weightDetails: details });\n  }\n  const handleAddDetailList = () => {\n    setOpenWeightDialog(false);\n  }\n  const handleSelect = (id, e) => {\n    setWeightDetailObj({ ...weightDetailObj, [id]: e.target.value })\n    console.log(weightDetailObj)\n  }\n  const hanleAutoComplete = (id, newValue) => {\n    setWeightDetailObj({ ...weightDetailObj, [id]: newValue })\n  }\n  const onInput = (id, e) => {\n    switch (id) {\n      case 'weight':\n      case 'weightMemo':\n        setWeightDetailObj({ ...weightDetailObj, [id]: e.target.value })\n        return;\n      case 'place':\n      case 'memo':\n        setRecord({ ...record, [id]: e.target.value });\n        return;\n      default:\n        return;\n    }\n  }\n  const handleClear = () => {\n    setWeightDetailObj({ part: null, movement: null, equipment: null, weight: \"\", weightUnit: 'kg', times: \"\", sets: \"\", rest: \"\", weightMemo: \"\" });\n  }\n  const handleSaveWeight = () => {\n    console.log(record);\n  }\n\n  const handleChangeStartTime = (newDate) => {\n    if (!isAfter(newDate, record.formatEndTime)) {\n      setRecord({ ...record, startTime: format(newDate, 'HH:mm'), formatStartTime: newDate });\n      setTimeHasError(false);\n      return;\n    }\n    setTimeHasError(true);\n  }\n\n  const handleChangeEndTime = (newDate) => {\n    if (isAfter(newDate, record.formatStartTime)) {\n      setRecord({ ...record, endTime: format(newDate, 'HH:mm'), formatEndTime: newDate });\n      setTimeHasError(false);\n      return;\n    }\n    setTimeHasError(true);\n\n  }\n  const formatWeightDetailContent = (detail) => {\n    return `${Object.prototype.hasOwnProperty.call(detail, \"part\") && detail.part !== null ? detail.part.title : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"movement\") && detail.movement !== null ? detail.movement.title : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"equipment\") && detail.equipment !== null ? detail.equipment.title : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"weight\") && detail.weight !== \"\" ? detail.weight + detail.weightUnit : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"times\") && detail.times !== \"\" ? detail.times + \" times\" : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"sets\") && detail.sets !== \"\" ? detail.sets + \" sets\" : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"rest\") && detail.rest !== \"\" ? detail.rest + \" min\" : \"\"}\n            ${Object.prototype.hasOwnProperty.call(detail, \"weightMemo\") && detail.weightMemoÎ !== \"\" ? detail.weightMemo : \"\"}`\n  }\n  const handleBackPrevPage = () => {\n    props.history.push('/main');\n  }\n  useEffect(() => {\n    console.log(\"useEffect start\")\n  })\n  const openPopover = Boolean(anchorEl);\n  const popoverId = openPopover ? 'simple-popover' : undefined;\n  const helperText = timeHasError ? \"Start Time must be earlier than End Time\" : \"\"\n\n  let addWorkoutTitle = ''\n  let dialogAction;\n  let dialogContent;\n  if (trainType !== \"\") {\n    if (trainType === 'weight') {\n      addWorkoutTitle = `Weight Training - ${format(currentDate, 'LLL / dd').toUpperCase()}`\n      dialogContent = <Fragment>\n        <Grid container justify=\"space-between\" spacing={1}>\n          <Grid item lg={6} xs={12}><DateTimePicker label=\"Start Time\" type=\"Time\" variant=\"outlined\" selectValue={record.formatStartTime} handleDateChange={handleChangeStartTime} helperText={helperText} /></Grid>\n          <Grid item lg={6} xs={12}><DateTimePicker label=\"End Time\" type=\"Time\" variant=\"outlined\" selectValue={record.formatEndTime} handleDateChange={handleChangeEndTime} /></Grid>\n          <Grid item lg={12} xs={12}><TextField variant=\"outlined\" label=\"Place\" value={record.place} onChange={(e) => onInput('place', e)} className={classes.input} /></Grid>\n          <Grid item lg={12} xs={12}><TextField variant=\"outlined\" multiline label=\"Memo\" rows={5} value={record.memo} onChange={(e) => onInput('memo', e)} fullWidth /></Grid>\n\n          <Grid item lg={12}>\n            <BasicButton text=\"Detail\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={false}\n              size=\"large\"\n              startIcon=\"AddIcon\"\n              clickButton={handleOpenWeightDialog} />\n          </Grid>\n          {record.weightDetails ?\n            <Grid item lg={8} xs={12}>\n              <List>\n                {record.weightDetails.map(item => (\n                  <ListItem key={item.id}>\n                    <ListItemText\n                      primary={formatWeightDetailContent(item)}\n                      secondary={secondary ? 'Secondary text' : null}\n                    />\n                    <ListItemSecondaryAction>\n                      <IconButton color=\"primary\" icon=\"DeleteIcon\" ariaLabel=\"delete\" className=\"list-icon-button\" clickButton={() => handleDeleteDetail(item.id)} />\n                    </ListItemSecondaryAction>\n                  </ListItem>\n                ))}\n              </List>\n            </Grid> : <Fragment></Fragment>\n          }\n        </Grid>\n      </Fragment >\n      dialogAction = <Fragment>\n        <BasicButton text=\"CANCEL\"\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={false}\n          size=\"large\"\n          clickButton={handleCloseDialog} />\n        <BasicButton text=\"BACK\"\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={mode === 'edit'}\n          size=\"large\"\n          clickButton={handleBack} />\n        <BasicButton text=\"SAVE\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={trainType === '' ? true : false}\n          size=\"large\"\n          clickButton={handleSaveWeight} />\n      </Fragment>\n    } else {\n      addWorkoutTitle = `Other Training - ${format(currentDate, 'LLL / dd').toUpperCase()}`\n      dialogContent = <Fragment>\n        <Grid container justify=\"space-between\" spacing={1}>\n          <Grid item lg={6} xs={12}><DateTimePicker label=\"Start Time\" type=\"Time\" variant=\"outlined\" selectValue={record.startTime} handleDateChange={handleChangeStartTime} helperText={helperText} /></Grid>\n          <Grid item lg={6} xs={12}><DateTimePicker label=\"End Time\" type=\"Time\" variant=\"outlined\" selectValue={record.endTime} handleDateChange={handleChangeEndTime} /></Grid>\n          <Grid item lg={12} xs={12}><TextField variant=\"outlined\" label=\"Place\" value={record.place} onChange={(e) => onInput('place', e)} className={classes.input} /></Grid>\n          <Grid item lg={12} xs={12}><TextField variant=\"outlined\" multiline label=\"Memo\" rows={5} value={record.memo} onChange={(e) => onInput('memo', e)} fullWidth /></Grid>\n        </Grid>\n      </Fragment >\n      dialogAction = <Fragment>\n        <BasicButton text=\"CANCEL\"\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={false}\n          size=\"large\"\n          clickButton={handleCloseDialog} />\n        <BasicButton text=\"BACK\"\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={mode === 'edit'}\n          size=\"large\"\n          clickButton={handleBack} />\n        <BasicButton text=\"SAVE\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={trainType === '' ? true : false}\n          size=\"large\"\n          clickButton={handleCloseDialog} />\n      </Fragment>\n    }\n  } else {\n    addWorkoutTitle = `Workout - ${format(currentDate, 'LLL / dd').toUpperCase()}`;\n    dialogAction = <Fragment>\n      <BasicButton text=\"CANCEL\"\n        variant=\"outlined\"\n        color=\"primary\"\n        disabled={false}\n        size=\"large\"\n        clickButton={handleCloseDialog} />\n    </Fragment>\n    dialogContent = <Fragment>\n      <Typography variant=\"subtitle1\">Please choose a workout type</Typography>\n      <div className=\"wk-type\">\n        <ButtonBase\n          focusRipple\n          className=\"btn-wk-type\"\n          onClick={() => handleClickBaseButton('weight')}\n        >\n          <div className=\"wk-type-content\"><FitnessCenterIcon style={{ fontSize: 50 }} /></div>\n          <Typography variant=\"subtitle1\">Weight Training</Typography>\n        </ButtonBase>\n        <ButtonBase\n          focusRipple\n          className=\"btn-wk-type\"\n          onClick={() => handleClickBaseButton('other')}\n        >\n          <div className=\"wk-type-content\"><DirectionsRunIcon style={{ fontSize: 50 }} /></div>\n          <Typography variant=\"subtitle1\">Other Training</Typography>\n        </ButtonBase>\n      </div>\n    </Fragment>\n  }\n  return (\n    <Fragment>\n      <div className=\"bg-main\">\n        <Container maxWidth=\"xl\">\n          <section>\n            <AppBar position=\"sticky\">\n              <Toolbar className=\"header\">\n                <Link to=\"/\">\n                  <img src={logo} alt=\"logo\" className=\"logo\" />\n                </Link>\n                <Avatar>YC</Avatar>\n              </Toolbar>\n            </AppBar>\n            {/* <div className=\"header\">\n              <Link to=\"/main\">\n                <img src={logo} alt=\"logo\" className=\"logo\" />\n              </Link>\n              <Avatar>YC</Avatar>\n            </div>*/}\n          </section>\n          <section>\n            <Grid container justify=\"center\" spacing={3}>\n              <Grid item lg={10} xs={12}>\n                <BasicButton text=\"BACK\"\n                  variant=\"text\"\n                  color=\"default\"\n                  disabled={false}\n                  startIcon=\"KeyboardBackspaceIcon\"\n                  size=\"large\"\n                  clickButton={handleBackPrevPage} />\n                <Card>\n                  <Calendar clickParentDate={clickDate} clickParentDateEvent={handleOpenPopover} workoutList={workoutList}>\n                    <BasicButton text=\"NEW WORKOUT\"\n                      variant=\"outlined\"\n                      color=\"primary\"\n                      disabled={false}\n                      size=\"large\"\n                      startIcon=\"AddIcon\"\n                      clickButton={() => handleOpenDialog('add')} />\n                  </Calendar>\n                </Card>\n              </Grid></Grid>\n          </section>\n        </Container>\n      </div>\n      <Dialog maxWidth={'sm'} fullWidth={true}\n        title={addWorkoutTitle}\n        openDialog={openDialog}\n        actions={dialogAction}\n      >\n        {dialogContent}\n      </Dialog>\n      <Dialog maxWidth={'md'} fullWidth={true}\n        title='WEIGHT TRAINING - DETAIL'\n        openDialog={openWeightDialog}\n        actions={<Fragment>\n          <BasicButton text=\"CANCEL\"\n            variant=\"outlined\"\n            color=\"primary\"\n            disabled={false}\n            size=\"large\"\n            clickButton={handleCloseWeightDialog} />\n          <BasicButton text=\"OK\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={false}\n            size=\"large\"\n            clickButton={handleAddDetailList} />\n        </Fragment>}\n      >\n        <Fragment>\n          <Grid container justify=\"flex-start\" spacing={1}>\n            <Grid item lg={3} xs={12}>\n              <AutoComplete id=\"part\" list={parts} label=\"Part\" defaultValue={weightDetailObj.part} changeSelect={(newValue) => hanleAutoComplete('part', newValue)} />\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <AutoComplete id=\"movement\" list={movements} label=\"Movement\" defaultValue={weightDetailObj.movement} changeSelect={(newValue) => hanleAutoComplete('movement', newValue)} />\n            </Grid>\n            <Grid item lg={3} xs={12}>\n              <AutoComplete id=\"equipment\" list={equipments} label=\"Equipment\" defaultValue={weightDetailObj.equipment} changeSelect={(newValue) => hanleAutoComplete('equipment', newValue)} />\n            </Grid>\n            <Grid item lg={1} xs={6}>\n              <TextField variant=\"outlined\" label=\"Weight\" className={classes.input} value={weightDetailObj.weight} onChange={(e) => onInput('weight', e)} />\n            </Grid>\n            <Grid item lg={2} xs={6}>\n              <TextField\n                id=\"weightUnit\"\n                select\n                label=\"Unit\"\n                value={weightDetailObj.weightUnit}\n                onChange={(e) => handleSelect('weightUnit', e)}\n                variant=\"outlined\"\n                className={classes.input}\n              >\n                {weightUnits.map((option) => (\n                  <MenuItem key={option.value} value={option.value}>\n                    {option.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid item lg={3} xs={12}>\n              <FormControl variant=\"outlined\" fullWidth={true}>\n                <InputLabel id=\"label-times\">Times</InputLabel>\n                <Select\n                  labelId=\"label-times\"\n                  id=\"times\"\n                  value={weightDetailObj.times}\n                  onChange={(e) => handleSelect('times', e)}\n                  label=\"Times\"\n                >\n                  <MenuItem key=\"none\" value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20].map((value) =>\n                    <MenuItem key={value} value={value}>{value}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item lg={3} xs={12}>\n              <FormControl variant=\"outlined\" fullWidth={true}>\n                <InputLabel id=\"label-sets\">Sets</InputLabel>\n                <Select\n                  labelId=\"label-sets\"\n                  id=\"sets\"\n                  value={weightDetailObj.sets}\n                  onChange={(e) => handleSelect('sets', e)}\n                  label=\"Sets\"\n                >\n                  <MenuItem key=\"none\" value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20].map((value) =>\n                    <MenuItem key={value} value={value}>{value}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item lg={3} xs={12}>\n              <FormControl variant=\"outlined\" fullWidth={true}>\n                <InputLabel id=\"label-rest\">Rest (min)</InputLabel>\n                <Select\n                  labelId=\"label-rest\"\n                  id=\"rest\"\n                  value={weightDetailObj.rest}\n                  onChange={(e) => handleSelect('rest', e)}\n                  label=\"Rest\"\n                >\n                  <MenuItem key=\"none\" value=\"\">\n                    <em>None</em>\n                  </MenuItem>\n                  {[5, 15, 30, 45, 60, 90, 120, 150, 180].map((value) =>\n                    <MenuItem key={value} value={value}>{value}</MenuItem>\n                  )}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item lg={6} xs={12}>\n              <TextField variant=\"outlined\" multiline label=\"Memo\" rows={1} fullWidth value={weightDetailObj.weightMemo} onChange={(e) => onInput('weightMemo', e)} />\n            </Grid>\n            <Grid item lg={3} xs={12}>\n              <BasicButton text=\"List\"\n                variant=\"outlined\"\n                color=\"primary\"\n                disabled={false}\n                size=\"small\"\n                startIcon=\"AddIcon\"\n                clickButton={() => handleAddDetail()} />\n              <BasicButton text=\"Clear\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                disabled={false}\n                size=\"small\"\n                startIcon=\"ClearIcon\"\n                clickButton={() => handleClear()} />\n            </Grid>\n          </Grid>\n          {record.weightDetails ?\n            <Grid container justify=\"flex-start\" spacing={1}>\n              <Grid item lg={8} xs={12}>\n                <List>\n                  {record.weightDetails && record.weightDetails.map(item => (\n                    <ListItem key={item.id}>\n                      <ListItemText\n                        primary={formatWeightDetailContent(item)}\n                        secondary={secondary ? 'Secondary text' : null}\n                      />\n                      <ListItemSecondaryAction>\n                        <IconButton color=\"primary\" icon=\"DeleteIcon\" ariaLabel=\"delete\" className=\"list-icon-button\" clickButton={() => handleDeleteDetail(item.id)} />\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              </Grid>\n            </Grid> : <Fragment></Fragment>\n          }\n        </Fragment >\n      </Dialog>\n      <Popover\n        id={popoverId}\n        open={openPopover}\n        anchorEl={anchorEl}\n        onClose={handleClosePopover}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        <Typography variant=\"h4\">{`${format(currentDate, 'LLL / dd').toUpperCase()} - ${record.name}`}</Typography>\n        {record.startTime && record.endTime ?\n          <Fragment>\n            <Typography variant=\"h5\" display=\"block\" gutterBottom><ScheduleIcon /> Time</Typography>\n            <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>{record.startTime} ~ {record.endTime}</Typography>\n          </Fragment> : <Fragment></Fragment>\n        }\n        {record.place ?\n          <Fragment>\n            <Typography variant=\"h5\" display=\"block\" gutterBottom><RoomIcon /> Place</Typography>\n            <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>{record.place}</Typography>\n          </Fragment> : <Fragment></Fragment>\n        }\n        {record.memo ?\n          <Fragment>\n            <Typography variant=\"h5\" display=\"block\" gutterBottom><MenuBookIcon /> Memo</Typography>\n            <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>{record.memo}</Typography>\n          </Fragment> : <Fragment></Fragment>\n        }\n        {record.weightDetails ?\n          <Fragment>\n            <Typography variant=\"h5\" display=\"block\" gutterBottom><SubjectIcon /> Detail</Typography>\n            <List>\n              {record.weightDetails && record.weightDetails.map(item => (\n                <ListItem key={Date.now()}>\n                  <ListItemText\n                    primary={formatWeightDetailContent(item)}\n                    secondary={secondary ? 'Secondary text' : null}\n                  />\n                  <ListItemSecondaryAction>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              ))}\n            </List>\n          </Fragment> : <Fragment></Fragment>\n        }\n        <div className=\"popover-action\">\n          <BasicButton text=\"DELETE\"\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={false}\n            size=\"large\"\n            clickButton={() => handleOpenDialog('edit')} />\n          <BasicButton text=\"EDIT\"\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={false}\n            size=\"large\"\n            clickButton={() => handleOpenDialog('edit')} />\n        </div>\n      </Popover>\n    </Fragment>\n\n  );\n};\nexport default Record;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme } from '@material-ui/core/styles';\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    h4: {\n      marginTop: 10,\n      marginBottom: 10\n    },\n  },\n  palette: {\n    primary: {\n      light: '#EDEDED',\n      main: '#939597',\n      dark: '#6A6C6D',\n    },\n    secondary: {\n      // light: '#cdcdcd',\n      main: '#cd6d6d',\n      // dark: '#676C72',\n    },\n    success: {\n      main: '#839c57',\n    },\n    error: {\n      main: '#cd6d6d',\n    },\n    danger: {\n      main: '#FFCE2F',\n    },\n    // 使用 `getContrastText()` 来最大化\n    // 背景和文本的对比度\n    contrastThreshold: 3,\n    // 使用下面的函数用于将颜色的亮度在其调色板中\n    // 移动大约两个指数。\n    // 例如，从红色 500（Red 500）切换到 红色 300（Red 300）或 红色 700（Red 700）。\n    tonalOffset: 0.2,\n  },\n});\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ThemeStyle from './theme.js';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = ThemeStyle;\nReactDOM.render(\n  <ThemeProvider theme={theme}><App /></ThemeProvider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}